@page "/"
@using Microsoft.EntityFrameworkCore
@using Models.Entities
@using Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using rz_list.Components.Account
@inject IDbContextFactory<Data.RzListDbContext> DbFactory
@inject IJSRuntime JSRuntime
@inject IdentityUserAccessor UserAccessor
@inject IHttpContextAccessor HttpContextAccessor
@implements IAsyncDisposable

<PageTitle>Home - RZ List</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <!-- Hero Section -->
    <MudPaper Class="pa-8 mb-6" Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
        <MudGrid align-items="Center" justify="Justify.Center">
            <MudItem xs="12" md="8" Class="text-center">
                <MudText Typo="Typo.h2" GutterBottom="true" Style="font-weight: 300;">
                    Welcome to RZ List
                </MudText>
                <MudText Typo="Typo.h5" Style="opacity: 0.9; font-weight: 300;">
                    Discover, organize, and track your reading journey
                </MudText>
                <MudButton Variant="Variant.Outlined" Color="Color.Surface" Size="Size.Large" Class="mt-4"
                    StartIcon="@Icons.Material.Filled.LibraryBooks">
                    Explore Books
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (loading)
    {
        <MudProgressLinear Indeterminate="true" />
    }
    else
    {
        <!-- Featured Books by Genre -->
        <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-4">Featured Books by Genre</MudText>

        @if (booksByGenre.Any())
        {
            <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                @foreach (var genreGroup in booksByGenre.Take(6))
                {
                    <MudTabPanel Text="@genreGroup.Key.ToDisplayString()">
                        <MudGrid>
                            @foreach (var book in genreGroup.Take(8))
                            {
                                <MudItem xs="12" sm="6" md="4" lg="3">
                                    <MudCard Class="cursor-pointer h-100" Elevation="2" Style="transition: transform 0.2s ease-in-out;"
                                        onmouseover="this.style.transform='translateY(-4px)'"
                                        onmouseout="this.style.transform='translateY(0)'" @onclick="() => OpenBookModal(book)">
                                        <MudCardMedia Image="@GetBookCoverImage(book)" Height="200"
                                            Style="background-color: #f5f5f5;" />
                                        <MudCardContent>
                                            <MudText Typo="Typo.subtitle1"
                                                Style="font-weight: 500; height: 3rem; overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">
                                                @book.Title
                                            </MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-1">
                                                by @book.Author
                                            </MudText>
                                            @if (!string.IsNullOrEmpty(book.Publisher))
                                            {
                                                <MudText Typo="Typo.caption" Color="Color.Tertiary" Class="mt-2">
                                                    @book.Publisher
                                                </MudText>
                                            }
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudTabPanel>
                }
            </MudTabs>
        }

        <!-- Featured Publishers Carousel -->
        @if (featuredPublishers.Any())
        {
            <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-4 mt-8">Featured Publishers</MudText>
            <MudPaper Elevation="1" Class="pa-4">
                <div class="publisher-carousel" id="publisher-carousel">
                    <MudGrid>
                        @{
                            var currentPublishers = GetCurrentPublisherSlice();
                        }
                        @foreach (var publisherGroup in currentPublishers)
                        {
                            <MudItem xs="12" sm="6" md="3">
                                <MudCard Elevation="0" Class="text-center publisher-card" Style="transition: all 0.5s ease-in-out;">
                                    <MudCardContent>
                                        <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Large" Color="Color.Primary"
                                            Class="mb-2" />
                                        <MudText Typo="Typo.h6" GutterBottom="true">
                                            @(string.IsNullOrEmpty(publisherGroup.Key) ? "Independent" : publisherGroup.Key)
                                        </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                                            @publisherGroup.Count() book(s)
                                        </MudText>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" Class="mt-2"
                                            @onclick="() => ShowPublisherBooks(publisherGroup.Key)">
                                            View Books
                                        </MudButton>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>

                    <!-- Carousel indicators -->
                    @if (featuredPublishers.Count > 4)
                    {
                        <div class="carousel-indicators text-center mt-3">
                            @for (int i = 0; i < GetTotalSlices(); i++)
                            {
                                <button type="button" class="carousel-radio-btn @(i == currentPublisherSlice ? "active" : "")"
                                    @onclick="() => GoToSlice(i)" title="Go to page @(i + 1)">
                                    <span class="carousel-radio-dot"></span>
                                </button>
                            }
                        </div>
                    }
                </div>
            </MudPaper>
        }

        <!-- Recent Additions -->
        @if (recentBooks.Any())
        {
            <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-4 mt-8">Recently Added Books</MudText>
            <MudGrid>
                @foreach (var book in recentBooks.Take(4))
                {
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard Class="cursor-pointer h-100" Elevation="2" @onclick="() => OpenBookModal(book)">
                            <MudCardMedia Image="@GetBookCoverImage(book)" Height="200" Style="background-color: #f5f5f5;" />
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle1" Style="font-weight: 500;">
                                    @book.Title
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    by @book.Author
                                </MudText>
                                <MudChip T="string" Size="Size.Small" Color="Color.Primary" Class="mt-2">
                                    @book.Genre.ToDisplayString()
                                </MudChip>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }

        <!-- Statistics Cards -->
        <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-4 mt-8">Library Statistics</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.MenuBook" Size="Size.Large" Color="Color.Primary" />
                        <MudText Typo="Typo.h4" Class="mt-2">@totalBooks</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Total Books</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" Color="Color.Secondary" />
                        <MudText Typo="Typo.h4" Class="mt-2">@uniqueGenres</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Genres</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Large" Color="Color.Tertiary" />
                        <MudText Typo="Typo.h4" Class="mt-2">@uniquePublishers</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Publishers</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Elevation="2">
                    <MudCardContent Class="text-center">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" Color="Color.Success" />
                        <MudText Typo="Typo.h4" Class="mt-2">@uniqueAuthors</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Authors</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

<!-- Publisher Books Dialog -->
<MudDialog @bind-Visible="showPublisherDialog" max-width="MaxWidth.Large">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Books by @(string.IsNullOrEmpty(selectedPublisher) ? "Independent Publishers" : selectedPublisher)
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (selectedPublisherBooks.Any())
        {
            <MudGrid>
                @foreach (var book in selectedPublisherBooks)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Class="h-100 cursor-pointer" @onclick="() => OpenBookModal(book)">
                            <MudCardMedia Image="@GetBookCoverImage(book)" Height="150" Style="background-color: #f5f5f5;" />
                            <MudCardContent>
                                <MudText Typo="Typo.subtitle2">@book.Title</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">by @book.Author</MudText>
                                <MudChip T="string" Size="Size.Small" Color="Color.Primary" Class="mt-1">
                                    @book.Genre.ToDisplayString()
                                </MudChip>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ClosePublisherDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

<!-- Book Details & Add to List Modal -->
<MudDialog @bind-Visible="showBookModal" MaxWidth="MaxWidth.Medium">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Add "@selectedBookForModal?.Title" to Reading List
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (selectedBookForModal != null)
        {
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudImage Src="@GetBookCoverImage(selectedBookForModal)" Alt="@selectedBookForModal.Title"
                        Style="width: 100%; max-width: 200px; height: auto;" />
                </MudItem>
                <MudItem xs="12" md="8">
                    <MudText Typo="Typo.h6" GutterBottom="true">@selectedBookForModal.Title</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">by @selectedBookForModal.Author</MudText>
                    @if (!string.IsNullOrEmpty(selectedBookForModal.Publisher))
                    {
                        <MudText Typo="Typo.body2" Color="Color.Tertiary" Class="mt-1">
                            Publisher: @selectedBookForModal.Publisher
                        </MudText>
                    }
                    @if (selectedBookForModal.PublishedDate.HasValue)
                    {
                        <MudText Typo="Typo.body2" Color="Color.Tertiary">
                            Published: @selectedBookForModal.PublishedDate.Value.Year
                        </MudText>
                    }
                    <MudChip T="string" Size="Size.Small" Color="Color.Primary" Class="mt-2">
                        @selectedBookForModal.Genre.ToDisplayString()
                    </MudChip>
                    @if (!string.IsNullOrEmpty(selectedBookForModal.Description))
                    {
                        <MudText Typo="Typo.body2" Class="mt-3">
                            @selectedBookForModal.Description
                        </MudText>
                    }
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-4" />

            @if (currentUser != null)
            {
                <MudText Typo="Typo.h6" GutterBottom="true">Select a Reading List:</MudText>

                @if (userLists.Any())
                {
                    <MudAutocomplete T="UserList" @bind-Value="selectedUserList" Label="Choose Reading List"
                        Variant="Variant.Outlined" SearchFunc="@SearchUserLists"
                        ToStringFunc="@(list => list?.Name + $" ({list?.UserBooks.Count} books)")" ResetValueOnEmptyText="false"
                        CoerceText="false" CoerceValue="false" AdornmentIcon="@Icons.Material.Filled.Search"
                        AdornmentColor="Color.Primary" MaxItems="null" Dense="true">
                        <ItemTemplate Context="listItem">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.List" Size="Size.Small" Class="mr-2" />
                                <div>
                                    <MudText Typo="Typo.body1">@listItem.Name</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@listItem.UserBooks.Count book(s)</MudText>
                                </div>
                            </div>
                        </ItemTemplate>
                    </MudAutocomplete>

                    @if (addToListError)
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-2">
                            @addToListErrorMessage
                        </MudAlert>
                    }

                    @if (addToListSuccess)
                    {
                        <MudAlert Severity="Severity.Success" Class="mt-2">
                            Book successfully added to @selectedUserList?.Name!
                        </MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="Severity.Info">
                        You don't have any reading lists yet.
                        <MudLink Href="/userlists/create">Create one here</MudLink>.
                    </MudAlert>
                }
            }
            else
            {
                <MudAlert Severity="Severity.Warning">
                    You need to be logged in to add books to your reading lists.
                </MudAlert>
            }
        }
    </DialogContent>
    <DialogActions>
        @if (currentUser != null && userLists.Any() && selectedUserList != null)
        {
            <MudButton OnClick="AddBookToSelectedList" Variant="Variant.Filled" Color="Color.Primary"
                Disabled="addingToList">
                @if (addingToList)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <span class="ml-2">Adding...</span>
                }
                else
                {
                    <span>Add to List</span>
                }
            </MudButton>
        }
        <MudButton OnClick="CloseBookModal">Close</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .publisher-carousel {
        position: relative;
        overflow: hidden;
    }

    .publisher-card {
        animation: slideIn 0.5s ease-in-out;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(20px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .carousel-indicators {
        margin-top: 1rem;
    }

    .carousel-radio-btn {
        background: none;
        border: none;
        padding: 8px;
        margin: 0 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        outline: none;
    }

    .carousel-radio-btn:hover {
        transform: scale(1.1);
    }

    .carousel-radio-dot {
        display: inline-block;
        width: 14px;
        height: 14px;
        border-radius: 50%;
        border: 2px solid #594ae2;
        background-color: transparent;
        transition: all 0.3s ease;
        position: relative;
    }

    .carousel-radio-btn.active .carousel-radio-dot {
        background-color: #594ae2;
        box-shadow: 0 0 0 3px rgba(89, 74, 226, 0.2);
    }

    .carousel-radio-btn.active .carousel-radio-dot::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background-color: white;
    }

    .mud-card:hover {
        transform: translateY(-2px);
        transition: transform 0.2s ease-in-out;
    }

    .hero-section {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 12px;
    }
</style>

@code {
    private RzListDbContext context = default!;
    private bool loading = true;
    private List<Book> allBooks = new();
    private List<Book> recentBooks = new();
    private List<IGrouping<Genre, Book>> booksByGenre = new();
    private List<IGrouping<string, Book>> featuredPublishers = new();
    private List<Book> selectedPublisherBooks = new();
    private string selectedPublisher = string.Empty;
    private bool showPublisherDialog = false;

    // Book modal variables
    private bool showBookModal = false;
    private Book? selectedBookForModal = null;
    private List<UserList> userLists = new();
    private UserList? selectedUserList = null;
    private User? currentUser = null;
    private bool addingToList = false;
    private bool addToListError = false;
    private bool addToListSuccess = false;
    private string addToListErrorMessage = string.Empty;

    private int totalBooks = 0;
    private int uniqueGenres = 0;
    private int uniquePublishers = 0;
    private int uniqueAuthors = 0;

    private Timer? autoRotateTimer;
    private int currentPublisherSlice = 0;
    private const int publishersPerSlice = 4;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        await LoadData();
        await LoadCurrentUser();
        // Start auto-rotation for featured publishers
        StartAutoRotation();
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;

            allBooks = await context.Books
            .OrderBy(b => b.DateAdded)
            .ToListAsync();

            // Group books by genre (only genres with books)
            booksByGenre = allBooks
            .GroupBy(b => b.Genre)
            .Where(g => g.Any())
            .OrderByDescending(g => g.Count())
            .ToList();

            // Recent books (last 30 days or most recent if none in last 30 days)
            var thirtyDaysAgo = DateTime.UtcNow.AddDays(-30);
            recentBooks = allBooks
            .Where(b => b.DateAdded >= thirtyDaysAgo)
            .OrderByDescending(b => b.DateAdded)
            .ToList();

            if (!recentBooks.Any())
            {
                recentBooks = allBooks
                .OrderByDescending(b => b.DateAdded)
                .ToList();
            }

            // Featured publishers - randomly select publishers seeded with current time
            var random = new Random((int)(DateTime.Now.Ticks % int.MaxValue));
            var allPublisherGroups = allBooks
            .GroupBy(b => b.Publisher ?? string.Empty)
            .Where(g => g.Any())
            .ToList();

            featuredPublishers = allPublisherGroups
            .OrderBy(_ => random.Next())
            .ToList();

            // Statistics
            totalBooks = allBooks.Count;
            uniqueGenres = allBooks.Select(b => b.Genre).Distinct().Count();
            uniquePublishers = allBooks.Where(b => !string.IsNullOrEmpty(b.Publisher))
            .Select(b => b.Publisher).Distinct().Count();
            uniqueAuthors = allBooks.Select(b => b.Author).Distinct().Count();
        }
        finally
        {
            loading = false;
        }
    }

    private string GetBookCoverImage(Book book)
    {
        return !string.IsNullOrEmpty(book.CoverImageUrl) ? book.CoverImageUrl : "/images/book-placeholder.svg";
    }

    private void ShowPublisherBooks(string publisher)
    {
        selectedPublisher = publisher;
        selectedPublisherBooks = allBooks
        .Where(b => (string.IsNullOrEmpty(publisher) && string.IsNullOrEmpty(b.Publisher)) ||
        b.Publisher == publisher)
        .ToList();
        showPublisherDialog = true;
    }

    private void ClosePublisherDialog()
    {
        showPublisherDialog = false;
        selectedPublisherBooks.Clear();
        selectedPublisher = string.Empty;
    }

    private List<IGrouping<string, Book>> GetCurrentPublisherSlice()
    {
        if (!featuredPublishers.Any()) return new List<IGrouping<string, Book>>();

        int startIndex = currentPublisherSlice * publishersPerSlice;
        return featuredPublishers
        .Skip(startIndex)
        .Take(publishersPerSlice)
        .ToList();
    }

    private int GetTotalSlices()
    {
        return (int)Math.Ceiling((double)featuredPublishers.Count / publishersPerSlice);
    }

    private void GoToSlice(int sliceIndex)
    {
        if (sliceIndex >= 0 && sliceIndex < GetTotalSlices())
        {
            currentPublisherSlice = sliceIndex;
            StateHasChanged();
        }
    }

    private void StartAutoRotation()
    {
        autoRotateTimer = new Timer(async _ =>
        {
            if (featuredPublishers.Any() && GetTotalSlices() > 1)
            {
                currentPublisherSlice = (currentPublisherSlice + 1) % GetTotalSlices();
                await InvokeAsync(StateHasChanged);
            }
        }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext != null && httpContext.User.Identity?.IsAuthenticated == true)
            {
                currentUser = await UserAccessor.GetRequiredUserAsync(httpContext);
                await LoadUserLists();
            }
        }
        catch
        {
            // User not authenticated or error getting user - that's okay for the home page
            currentUser = null;
        }
    }

    private async Task LoadUserLists()
    {
        if (currentUser == null) return;

        try
        {
            userLists = await context.UserLists
            .Include(ul => ul.UserBooks)
            .Where(ul => ul.UserId == currentUser.Id)
            .ToListAsync();
        }
        catch
        {
            userLists = new List<UserList>();
        }
    }

    private Task<IEnumerable<UserList>> SearchUserLists(string value, CancellationToken cancellationToken)
    {
        // Return all user lists if no search value or if cancelled
        if (string.IsNullOrWhiteSpace(value) || cancellationToken.IsCancellationRequested)
            return Task.FromResult(userLists.AsEnumerable());

        // Filter user lists based on the search term
        var filteredLists = userLists.Where(list =>
        list.Name != null &&
        list.Name.Contains(value, StringComparison.OrdinalIgnoreCase));

        return Task.FromResult(filteredLists);
    }

    private void OpenBookModal(Book book)
    {
        selectedBookForModal = book;
        selectedUserList = null;
        addToListError = false;
        addToListSuccess = false;
        addToListErrorMessage = string.Empty;
        showBookModal = true;
    }

    private void CloseBookModal()
    {
        showBookModal = false;
        selectedBookForModal = null;
        selectedUserList = null;
        addToListError = false;
        addToListSuccess = false;
        addToListErrorMessage = string.Empty;
    }

    private async Task AddBookToSelectedList()
    {
        if (selectedBookForModal == null || selectedUserList == null || currentUser == null)
            return;

        addingToList = true;
        addToListError = false;
        addToListSuccess = false;
        StateHasChanged();

        try
        {
            // Check if book is already in this specific list
            var existingUserBook = await context.UserBooks
            .FirstOrDefaultAsync(ub => ub.UserId == currentUser.Id &&
            ub.BookId == selectedBookForModal.Id &&
            ub.UserListId == selectedUserList.Id);

            if (existingUserBook == null)
            {
                // Create new UserBook entry for this specific list
                var userBook = new UserBook
                {
                    UserId = currentUser.Id,
                    BookId = selectedBookForModal.Id,
                    UserListId = selectedUserList.Id,
                    Status = ReadingStatus.WantToRead,
                    DateAdded = DateTime.UtcNow
                };

                context.UserBooks.Add(userBook);
                await context.SaveChangesAsync();

                addToListSuccess = true;

                // Reload user lists to update counts
                await LoadUserLists();
            }
            else
            {
                addToListError = true;
                addToListErrorMessage = "This book is already in the selected list.";
            }
        }
        catch (Exception)
        {
            addToListError = true;
            addToListErrorMessage = "An error occurred while adding the book to your list. Please try again.";
        }
        finally
        {
            addingToList = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        autoRotateTimer?.Dispose();
        await context.DisposeAsync();
    }
}
