@page "/userbooks"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using RzList.Models
@using RzList.Data
@implements IAsyncDisposable
@inject IDbContextFactory<RzList.Data.RzListDbContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="userbooks/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.UserBooks">
    <PropertyColumn Property="userbook => userbook.User.Username" Title="Username" />
    <PropertyColumn Property="userbook => userbook.Book.Title" Title="Book Title" />
    <PropertyColumn Property="userbook => userbook.Status" Title="Status" />
    <PropertyColumn Property="userbook => userbook.Rating" Title="Rating" />
    <PropertyColumn Property="userbook => userbook.Notes" Title="Notes" />
    <PropertyColumn Property="userbook => userbook.DateAdded" Title="Date Added" />
    <PropertyColumn Property="userbook => userbook.DateStarted" Title="Date Started" />
    <PropertyColumn Property="userbook => userbook.DateFinished" Title="Date Finished" />
    <PropertyColumn Property="userbook => userbook.ProgressPercentage" Title="Progress Percentage" />
    <PropertyColumn Property="userbook => userbook.IsFavorite" Title="Is Favorite" />

    <TemplateColumn Context="userbook">
        <a href="@($"userbooks/edit?id={userbook.Id}")">Edit</a> |
        <a href="@($"userbooks/details?id={userbook.Id}")">Details</a> |
        <a href="@($"userbooks/delete?id={userbook.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private RzListDbContext context = default!;
    private List<UserBook>? FilteredUserBooks;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        FilteredUserBooks = await context.UserBooks
            .Include(ub => ub.User)
            .Include(ub => ub.Book)
            .OrderBy(ub => ub.User.Username)
            .ThenBy(ub => ub.Book.Title)
            .ToListAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
