@page "/userbooks/create"
@using Microsoft.EntityFrameworkCore
@using Models.Entities
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject IDbContextFactory<Data.RzListDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Add Book to Reading List</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Add Book to Reading List</MudText>

    <EditForm Model="@UserBook" OnValidSubmit="OnValidSubmit" Class="mb-4">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudSelect T="Guid" Label="User" 
                            HelperText="@GetHelperText(nameof(UserBook.UserId), "Select the user")"
                            @bind-Value="UserBook.UserId" For="@(() => UserBook.UserId)" Required="true">
                            @foreach (var user in Users)
                            {
                                <MudSelectItem Value="@user.Id">@user.UserName (@user.Email)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudSelect T="Guid" Label="Book" 
                            HelperText="@GetHelperText(nameof(UserBook.BookId), "Select the book")"
                            @bind-Value="UserBook.BookId" For="@(() => UserBook.BookId)" Required="true">
                            @foreach (var book in Books)
                            {
                                <MudSelectItem Value="@book.Id">@book.Title by @book.Author</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudSelect T="ReadingStatus" Label="Reading Status" 
                            HelperText="@GetHelperText(nameof(UserBook.Status), "Current reading status")"
                            @bind-Value="UserBook.Status" For="@(() => UserBook.Status)">
                            <MudSelectItem Value="@ReadingStatus.WantToRead">Want to Read</MudSelectItem>
                            <MudSelectItem Value="@ReadingStatus.CurrentlyReading">Currently Reading</MudSelectItem>
                            <MudSelectItem Value="@ReadingStatus.Finished">Finished</MudSelectItem>
                            <MudSelectItem Value="@ReadingStatus.DNF">Did Not Finish</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudNumericField T="decimal?" Label="Rating (0-5)" 
                            HelperText="@GetHelperText(nameof(UserBook.Rating), "Rate the book from 0 to 5")"
                            @bind-Value="UserBook.Rating" For="@(() => UserBook.Rating)" 
                            Min="0" Max="5" Step="0.1M" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField Label="Notes" 
                            HelperText="@GetHelperText(nameof(UserBook.Notes), "Personal notes about the book")"
                            @bind-Value="UserBook.Notes" For="@(() => UserBook.Notes)" Lines="3" />
                    </MudItem>
                    
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudNumericField T="decimal?" Label="Progress (%)" 
                            HelperText="@GetHelperText(nameof(UserBook.ProgressPercentage), "Reading progress percentage")"
                            @bind-Value="UserBook.ProgressPercentage" For="@(() => UserBook.ProgressPercentage)" 
                            Min="0" Max="100" Step="0.1M" />
                    </MudItem>
                    
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudDatePicker Label="Date Finished" 
                            HelperText="@GetHelperText(nameof(UserBook.DateFinished), "When you finished reading")"
                            @bind-Date="UserBook.DateFinished" For="@(() => UserBook.DateFinished)" />
                    </MudItem>
                    
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCheckBox T="bool" Label="Mark as Favorite" 
                            @bind-Value="UserBook.IsFavorite" For="@(() => UserBook.IsFavorite)" 
                            Color="Color.Primary" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                    Class="ml-auto">Add to Reading List</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>

    @if (error)
    {
        <MudAlert Severity="Severity.Error" Class="mt-4">
            An error occurred while adding the book to your reading list. Please try again.
        </MudAlert>
    }

    <MudLink Href="/userbooks" Class="mt-4">Back to List</MudLink>
</MudContainer>

@code {
    private UserBook UserBook { get; set; } = new();
    private List<User> Users { get; set; } = new();
    private List<Book> Books { get; set; } = new();
    bool error = false;

    private string GetHelperText(string propertyName, string baseText)
    {
        var property = typeof(UserBook).GetProperty(propertyName);
        var isRequired = property?.GetCustomAttribute<RequiredAttribute>() != null;

        return isRequired ? $"{baseText} (required)" : baseText;
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Users = await context.Users.OrderBy(u => u.UserName).ToListAsync();
        Books = await context.Books.OrderBy(b => b.Title).ToListAsync();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            using var dbContext = DbFactory.CreateDbContext();
            
            UserBook.DateAdded = DateTime.UtcNow;
            
            // Auto-set DateStarted if status is CurrentlyReading and no date is set
            if (UserBook.Status == ReadingStatus.CurrentlyReading && !UserBook.DateStarted.HasValue)
            {
                UserBook.DateStarted = DateTime.UtcNow;
            }
            
            // Auto-set DateFinished if status is Finished and no date is set
            if (UserBook.Status == ReadingStatus.Finished && !UserBook.DateFinished.HasValue)
            {
                UserBook.DateFinished = DateTime.UtcNow;
            }
            
            dbContext.UserBooks.Add(UserBook);
            await dbContext.SaveChangesAsync();
            error = false;
            StateHasChanged();
            NavigationManager.NavigateTo("/userbooks");
        }
        catch (Exception)
        {
            error = true;
            StateHasChanged();
        }
    }
}
