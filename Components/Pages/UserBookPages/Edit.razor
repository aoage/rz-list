@page "/userbooks/edit"
@using Microsoft.EntityFrameworkCore
@using Models.Entities
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject IDbContextFactory<Data.RzListDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Reading List Entry</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Edit Reading List Entry</MudText>

    @if (UserBook is null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText>Loading...</MudText>
    }
    else
    {
        <EditForm Model="@UserBook" OnValidSubmit="OnValidSubmit" Class="mb-4">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="User" Value="@($"{UserBook.User?.Username} ({UserBook.User?.Email})")" 
                                ReadOnly="true" HelperText="Cannot be changed" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="Book" Value="@($"{UserBook.Book?.Title} by {UserBook.Book?.Author}")" 
                                ReadOnly="true" HelperText="Cannot be changed" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudSelect T="ReadingStatus" Label="Reading Status" 
                                HelperText="@GetHelperText(nameof(UserBook.Status), "Current reading status")"
                                @bind-Value="UserBook.Status" For="@(() => UserBook.Status)">
                                <MudSelectItem Value="@ReadingStatus.WantToRead">Want to Read</MudSelectItem>
                                <MudSelectItem Value="@ReadingStatus.CurrentlyReading">Currently Reading</MudSelectItem>
                                <MudSelectItem Value="@ReadingStatus.Finished">Finished</MudSelectItem>
                                <MudSelectItem Value="@ReadingStatus.DNF">Did Not Finish</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudNumericField T="decimal?" Label="Rating (0-5)" 
                                HelperText="@GetHelperText(nameof(UserBook.Rating), "Rate the book from 0 to 5")"
                                @bind-Value="UserBook.Rating" For="@(() => UserBook.Rating)" 
                                Min="0" Max="5" Step="0.1M" />
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudTextField Label="Notes" 
                                HelperText="@GetHelperText(nameof(UserBook.Notes), "Personal notes about the book")"
                                @bind-Value="UserBook.Notes" For="@(() => UserBook.Notes)" Lines="3" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudNumericField T="decimal?" Label="Progress (%)" 
                                HelperText="@GetHelperText(nameof(UserBook.ProgressPercentage), "Reading progress percentage")"
                                @bind-Value="UserBook.ProgressPercentage" For="@(() => UserBook.ProgressPercentage)" 
                                Min="0" Max="100" Step="0.1M" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudDatePicker Label="Date Finished" 
                                HelperText="@GetHelperText(nameof(UserBook.DateFinished), "When you finished reading")"
                                @bind-Date="UserBook.DateFinished" For="@(() => UserBook.DateFinished)" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="Date Added" Value="@UserBook.DateAdded.ToString("yyyy-MM-dd HH:mm:ss")" 
                                ReadOnly="true" HelperText="When you added this book to your list" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCheckBox T="bool" Label="Mark as Favorite" 
                                @bind-Value="UserBook.IsFavorite" For="@(() => UserBook.IsFavorite)" 
                                Color="Color.Primary" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                        Class="ml-auto">Update Entry</MudButton>
                    <MudButton OnClick="DeleteUserBook" Variant="Variant.Filled" Color="Color.Error"
                        Class="ml-2">Delete Entry</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>

        @if (error)
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">
                An error occurred while updating the reading list entry. Please try again.
            </MudAlert>
        }

        <MudLink Href="@($"/userbooks/details?id={UserBook.Id}")" Class="mt-4 mr-2">View Details</MudLink>
        <MudLink Href="/userbooks" Class="mt-4">Back to List</MudLink>
    }
</MudContainer>

@code {
    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    public UserBook? UserBook { get; set; }
    bool error = false;

    private string GetHelperText(string propertyName, string baseText)
    {
        var property = typeof(UserBook).GetProperty(propertyName);
        var isRequired = property?.GetCustomAttribute<RequiredAttribute>() != null;

        return isRequired ? $"{baseText} (required)" : baseText;
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        UserBook = await context.UserBooks
        .Include(ub => ub.User)
        .Include(ub => ub.Book)
        .FirstOrDefaultAsync(m => m.Id == Id);

        if (UserBook is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task OnValidSubmit(EditContext context)
    {
        try
        {
            using var dbContext = DbFactory.CreateDbContext();
            dbContext.Attach(UserBook!).State = EntityState.Modified;

            await dbContext.SaveChangesAsync();
            error = false;
            StateHasChanged();
            NavigationManager.NavigateTo("/userbooks");
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserBookExists(UserBook!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                error = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            error = true;
            StateHasChanged();
        }
    }

    bool UserBookExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.UserBooks.Any(e => e.Id == id);
    }

    private async Task DeleteUserBook()
    {
        if (UserBook is null)
            return;

        using var context = DbFactory.CreateDbContext();
        var entity = await context.UserBooks.FindAsync(UserBook.Id);
        if (entity != null)
        {
            context.UserBooks.Remove(entity);
            await context.SaveChangesAsync();
        }
        NavigationManager.NavigateTo("/userbooks");
    }
}
