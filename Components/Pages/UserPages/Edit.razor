@page "/users/edit"
@using Microsoft.EntityFrameworkCore
@using Models.Entities
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject IDbContextFactory<Data.RzListDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Edit User</MudText>

    @if (User is null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText>Loading...</MudText>
    }
    else
    {
        <EditForm Model="@User" OnValidSubmit="OnValidSubmit" Class="mb-4">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="Username" HelperText="@GetHelperText(nameof(User.Username), "User's login name")"
                                @bind-Value="User.Username" For="@(() => User.Username)" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="Email" HelperText="@GetHelperText(nameof(User.Email), "User's email address")"
                                @bind-Value="User.Email" For="@(() => User.Email)" InputType="InputType.Email" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudSelect T="UserPermissions" Label="Permissions" 
                                HelperText="@GetHelperText(nameof(User.Permissions), "User's permission level")"
                                @bind-Value="User.Permissions" For="@(() => User.Permissions)">
                                <MudSelectItem Value="@UserPermissions.BasicUser">Basic User</MudSelectItem>
                                <MudSelectItem Value="@UserPermissions.BookModerator">Book Moderator</MudSelectItem>
                                <MudSelectItem Value="@UserPermissions.UserModerator">User Moderator</MudSelectItem>
                                <MudSelectItem Value="@UserPermissions.Administrator">Administrator</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="Date Created" Value="@User.DateCreated.ToString("yyyy-MM-dd HH:mm:ss")" Disabled="true"
                                HelperText="User account creation date (read-only)" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                        Class="ml-auto">Update User</MudButton>
                    <MudButton OnClick="DeleteUser" Variant="Variant.Filled" Color="Color.Error"
                        Class="ml-2">Delete User</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>

        @if (error)
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">
                An error occurred while updating the user. Please try again.
            </MudAlert>
        }

        <MudLink Href="@($"/users/details?id={User.Id}")" Class="mt-4 mr-2">View Details</MudLink>
        <MudLink Href="/users" Class="mt-4">Back to List</MudLink>
    }
</MudContainer>

@code {
    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    [SupplyParameterFromForm]
    private User? User { get; set; }
    bool error = false;

    private string GetHelperText(string propertyName, string baseText)
    {
        var property = typeof(User).GetProperty(propertyName);
        var isRequired = property?.GetCustomAttribute<RequiredAttribute>() != null;

        return isRequired ? $"{baseText} (required)" : baseText;
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        User = await context.Users.FirstOrDefaultAsync(m => m.Id == Id);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            using var dbContext = DbFactory.CreateDbContext();
            dbContext.Attach(User!).State = EntityState.Modified;

            await dbContext.SaveChangesAsync();
            error = false;
            StateHasChanged();
            NavigationManager.NavigateTo("/users");
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                error = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            error = true;
            StateHasChanged();
        }
    }

    private bool UserExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Users.Any(e => e.Id == id);
    }

    private async Task DeleteUser()
    {
        if (User is null)
        {
            return;
        }

        using var context = DbFactory.CreateDbContext();
        var userToDelete = await context.Users.FindAsync(User.Id);
        if (userToDelete != null)
        {
            context.Users.Remove(userToDelete);
            await context.SaveChangesAsync();
        }
        NavigationManager.NavigateTo("/users");
    }
}
