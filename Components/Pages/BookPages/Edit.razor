@page "/books/edit"
@using Microsoft.EntityFrameworkCore
@using RzList.Models
@inject IDbContextFactory<RzList.Data.RzListDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Book</h2>
<hr />
@if (Book is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Book" OnValidSubmit="UpdateBook" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Book.Id" value="@Book.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Book.Title" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Book.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="author" class="form-label">Author:</label>
                    <InputText id="author" @bind-Value="Book.Author" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Book.Author" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isbn" class="form-label">ISBN:</label>
                    <InputText id="isbn" @bind-Value="Book.ISBN" class="form-control" />
                    <ValidationMessage For="() => Book.ISBN" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="publisheddate" class="form-label">PublishedDate:</label>
                    <InputDate id="publisheddate" @bind-Value="Book.PublishedDate" class="form-control" />
                    <ValidationMessage For="() => Book.PublishedDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Book.Description" class="form-control" />
                    <ValidationMessage For="() => Book.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="charactercount" class="form-label">CharacterCount:</label>
                    <InputNumber id="charactercount" @bind-Value="Book.CharacterCount" class="form-control" />
                    <ValidationMessage For="() => Book.CharacterCount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputText id="genre" @bind-Value="Book.Genre" class="form-control" />
                    <ValidationMessage For="() => Book.Genre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="publisher" class="form-label">Publisher:</label>
                    <InputText id="publisher" @bind-Value="Book.Publisher" class="form-control" />
                    <ValidationMessage For="() => Book.Publisher" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="coverimageurl" class="form-label">CoverImageUrl:</label>
                    <InputText id="coverimageurl" @bind-Value="Book.CoverImageUrl" class="form-control" />
                    <ValidationMessage For="() => Book.CoverImageUrl" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateadded" class="form-label">DateAdded:</label>
                    <InputDate id="dateadded" @bind-Value="Book.DateAdded" class="form-control" />
                    <ValidationMessage For="() => Book.DateAdded" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/books">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    [SupplyParameterFromForm]
    private Book? Book { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Book ??= await context.Books.FirstOrDefaultAsync(m => m.Id == Id);

        if (Book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Book!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BookExists(Book!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/books");
    }

    private bool BookExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Books.Any(e => e.Id == id);
    }
}
