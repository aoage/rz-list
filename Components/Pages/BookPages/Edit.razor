@page "/books/edit"
@using Microsoft.EntityFrameworkCore
@using Models.Entities
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject IDbContextFactory<Data.RzListDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Edit Book</MudText>

    @if (Book is null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText>Loading...</MudText>
    }
    else
    {
        <EditForm Model="@Book" OnValidSubmit="OnValidSubmit" Class="mb-4">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="Title" HelperText="@GetHelperText(nameof(Book.Title), "Book title")"
                                @bind-Value="Book.Title" For="@(() => Book.Title)" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="Author" HelperText="@GetHelperText(nameof(Book.Author), "Author name")"
                                @bind-Value="Book.Author" For="@(() => Book.Author)" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="ISBN"
                                HelperText="@GetHelperText(nameof(Book.ISBN), "International Standard Book Number")"
                                @bind-Value="Book.ISBN" For="@(() => Book.ISBN)" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudDatePicker Label="Published Date"
                                HelperText="@GetHelperText(nameof(Book.PublishedDate), "When was the book published")"
                                @bind-Date="Book.PublishedDate" For="@(() => Book.PublishedDate)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Description"
                                HelperText="@GetHelperText(nameof(Book.Description), "Book description")"
                                @bind-Value="Book.Description" For="@(() => Book.Description)" Lines="3" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudNumericField Label="Character Count"
                                HelperText="@GetHelperText(nameof(Book.CharacterCount), "Total number of characters")"
                                @bind-Value="Book.CharacterCount" For="@(() => Book.CharacterCount)" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="Genre"
                                HelperText="@GetHelperText(nameof(Book.Genre), "Book genre/category")"
                                @bind-Value="Book.Genre" For="@(() => Book.Genre)" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudTextField Label="Publisher"
                                HelperText="@GetHelperText(nameof(Book.Publisher), "Publishing company")"
                                @bind-Value="Book.Publisher" For="@(() => Book.Publisher)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Cover Image URL"
                                HelperText="@GetHelperText(nameof(Book.CoverImageUrl), "Link to book cover image")"
                                @bind-Value="Book.CoverImageUrl" For="@(() => Book.CoverImageUrl)" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                        Class="ml-auto">
                        Save Changes
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteBook" Class="ml-2">
                        Delete
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>

        @if (error)
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">
                An error occurred while updating the book. Please try again.
            </MudAlert>
        }

        <div class="mt-4">
            <MudLink Href="@($"/books/details?id={Book.Id}")" Class="mr-3">View Details</MudLink>
            <MudLink Href="/books">Back to List</MudLink>
        </div>
    }
</MudContainer>

@code {
    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    private Book? Book { get; set; }
    bool error = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Book = await context.Books.FirstOrDefaultAsync(m => m.Id == Id);

        if (Book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private string GetHelperText(string propertyName, string baseText)
    {
        var property = typeof(Book).GetProperty(propertyName);
        var isRequired = property?.GetCustomAttribute<RequiredAttribute>() != null;

        return isRequired ? $"{baseText} (required)" : baseText;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            using var dbContext = DbFactory.CreateDbContext();
            dbContext.Attach(Book!).State = EntityState.Modified;
            await dbContext.SaveChangesAsync();
            error = false;
            StateHasChanged();
            NavigationManager.NavigateTo("/books");
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BookExists(Book!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                error = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            error = true;
            StateHasChanged();
        }
    }

    private bool BookExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Books.Any(e => e.Id == id);
    }

    private async Task DeleteBook()
    {
        if (Book is null)
        {
            return;
        }

        try
        {
            using var context = DbFactory.CreateDbContext();
            var bookToDelete = await context.Books.FindAsync(Book.Id);
            if (bookToDelete != null)
            {
                context.Books.Remove(bookToDelete);
                await context.SaveChangesAsync();
            }
            NavigationManager.NavigateTo("/books");
        }
        catch (Exception)
        {
            error = true;
            StateHasChanged();
        }
    }
}
