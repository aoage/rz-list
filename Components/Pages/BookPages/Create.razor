@page "/books/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Models.Entities
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject IDbContextFactory<Data.RzListDbContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Policy = "RequireBookModerator")]

<PageTitle>Create</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Create New Book</MudText>

    <EditForm Model="@Book" OnValidSubmit="OnValidSubmit" Class="mb-4">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudTextField Label="Title" HelperText="@GetHelperText(nameof(Book.Title), "Book title")"
                            @bind-Value="Book.Title" For="@(() => Book.Title)" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudTextField Label="Author" HelperText="@GetHelperText(nameof(Book.Author), "Author name")"
                            @bind-Value="Book.Author" For="@(() => Book.Author)" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudTextField Label="ISBN"
                            HelperText="@GetHelperText(nameof(Book.ISBN), "International Standard Book Number")"
                            @bind-Value="Book.ISBN" For="@(() => Book.ISBN)" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudDatePicker Label="Published Date"
                            HelperText="@GetHelperText(nameof(Book.PublishedDate), "When was the book published")"
                            @bind-Date="Book.PublishedDate" For="@(() => Book.PublishedDate)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Description"
                            HelperText="@GetHelperText(nameof(Book.Description), "Book description")"
                            @bind-Value="Book.Description" For="@(() => Book.Description)" Lines="3" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudNumericField Label="Character Count"
                            HelperText="@GetHelperText(nameof(Book.CharacterCount), "Total number of characters")"
                            @bind-Value="Book.CharacterCount" For="@(() => Book.CharacterCount)" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudAutocomplete T="Genre" Label="Genre" @bind-Value="Book.Genre" SearchFunc="@SearchGenres"
                            ToStringFunc="@(genre => genre.ToDisplayString())"
                            HelperText="@GetHelperText(nameof(Book.Genre), "Book genre/category")"
                            ResetValueOnEmptyText="false" CoerceText="true" CoerceValue="true"
                            For="@(() => Book.Genre)">
                            <ItemTemplate Context="genre">
                                <MudText>@genre.ToDisplayString()</MudText>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudTextField Label="Publisher"
                            HelperText="@GetHelperText(nameof(Book.Publisher), "Publishing company")"
                            @bind-Value="Book.Publisher" For="@(() => Book.Publisher)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Cover Image URL"
                            HelperText="@GetHelperText(nameof(Book.CoverImageUrl), "Link to book cover image")"
                            @bind-Value="Book.CoverImageUrl" For="@(() => Book.CoverImageUrl)" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                    Class="ml-auto">Create Book</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>

    @if (error)
    {
        <MudAlert Severity="Severity.Error" Class="mt-4">
            An error occurred while creating the book. Please try again.
        </MudAlert>
    }

    <MudLink Href="/books" Class="mt-4">Back to List</MudLink>
</MudContainer>

@code {
    private Book Book { get; set; } = new();
    bool error = false;

    private string GetHelperText(string propertyName, string baseText)
    {
        var property = typeof(Book).GetProperty(propertyName);
        var isRequired = property?.GetCustomAttribute<RequiredAttribute>() != null;

        return isRequired ? $"{baseText} (required)" : baseText;
    }

    private async Task<IEnumerable<Genre>> SearchGenres(string value, CancellationToken cancellationToken)
    {
        var allGenres = Enum.GetValues<Genre>().AsEnumerable();

        if (string.IsNullOrWhiteSpace(value))
            return allGenres;

        return await Task.FromResult(allGenres.Where(genre =>
        genre.ToDisplayString().Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            using var dbContext = DbFactory.CreateDbContext();
            Book.DateAdded = DateTime.UtcNow;
            dbContext.Books.Add(Book);
            await dbContext.SaveChangesAsync();
            error = false;
            StateHasChanged();
            NavigationManager.NavigateTo("/books");
        }
        catch (Exception)
        {
            error = true;
            StateHasChanged();
        }
    }
}
