@page "/books/create"
@using Microsoft.EntityFrameworkCore
@using RzList.Models
@inject IDbContextFactory<RzList.Data.RzListDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Book</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Book" OnValidSubmit="AddBook" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="title" class="form-label">Title: <span class="text-danger">*</span></label>
                <InputText id="title" @bind-Value="Book.Title" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Book.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="author" class="form-label">Author: <span class="text-danger">*</span></label>
                <InputText id="author" @bind-Value="Book.Author" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Book.Author" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="isbn" class="form-label">ISBN:</label>
                <InputText id="isbn" @bind-Value="Book.ISBN" class="form-control" />
                <ValidationMessage For="() => Book.ISBN" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="publisheddate" class="form-label">Published Date:</label>
                <input type="date" id="publisheddate" value="@(Book.PublishedDate?.ToString("yyyy-MM-dd") ?? "")"
                    @onchange="@((e) => Book.PublishedDate = string.IsNullOrEmpty(e.Value?.ToString()) ? null : DateTime.Parse(e.Value?.ToString() ?? string.Empty))"
                    class="form-control" />
                <ValidationMessage For="() => Book.PublishedDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Book.Description" class="form-control" />
                <ValidationMessage For="() => Book.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="charactercount" class="form-label">Character Count:</label>
                <input type="number" id="charactercount" value="@(Book.CharacterCount?.ToString() ?? "")"
                    @onchange="@((e) => Book.CharacterCount = string.IsNullOrEmpty(e.Value?.ToString()) ? null : long.Parse(e.Value?.ToString() ?? ""))"
                    class="form-control" />
                <ValidationMessage For="() => Book.CharacterCount" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="genre" class="form-label">Genre:</label>
                <InputText id="genre" @bind-Value="Book.Genre" class="form-control" />
                <ValidationMessage For="() => Book.Genre" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="publisher" class="form-label">Publisher:</label>
                <InputText id="publisher" @bind-Value="Book.Publisher" class="form-control" />
                <ValidationMessage For="() => Book.Publisher" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="coverimageurl" class="form-label">CoverImageUrl:</label>
                <InputText id="coverimageurl" @bind-Value="Book.CoverImageUrl" class="form-control" />
                <ValidationMessage For="() => Book.CoverImageUrl" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/books">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Book Book { get; set; } = new();

    private async Task AddBook()
    {
        using var context = DbFactory.CreateDbContext();
        Book.DateAdded = DateTime.UtcNow;
        context.Books.Add(Book);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books");
    }
}
